class Solution {
    public int strongPasswordChecker(String s) {
        int n = s.length();
        boolean lower = false, upper = false, digit = false;
        for (char c : s.toCharArray()) {
            if (Character.isLowerCase(c)) lower = true;
            else if (Character.isUpperCase(c)) upper = true;
            else if (Character.isDigit(c)) digit = true;
        }
        int missingTypes = (lower ? 0 : 1) + (upper ? 0 : 1) + (digit ? 0 : 1);
        if (n < 6) return Math.max(6 - n, missingTypes);

        int replace = 0;
        int one = 0, two = 0;
        for (int i = 0; i < n;) {
            int j = i;
            while (j < n && s.charAt(j) == s.charAt(i)) j++;
            int len = j - i;
            if (len >= 3) {
                replace += len / 3;
                if (len % 3 == 0) one++;
                else if (len % 3 == 1) two++;
            }
            i = j;
        }
        if (n <= 20) return Math.max(replace, missingTypes);

        int delete = n - 20;
        int del = delete;
        int reduce = 0;
        int t = Math.min(del, one);
        del -= t;
        reduce += t;
        t = Math.min(del / 2, two);
        del -= t * 2;
        reduce += t;
        reduce += del / 3;
        return delete + Math.max(missingTypes, replace - reduce);
    }
}
