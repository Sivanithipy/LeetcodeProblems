class Solution {
    public void solveSudoku(char[][] board) {
        backtrack(board);
    }

    private boolean backtrack(char[][] board) 
    {
        for (int row = 0; row < 9; row++)
        {
            for (int col = 0; col < 9; col++) 
            {
                if (board[row][col] == '.') 
                { 
                    for (char c = '1'; c <= '9'; c++) 
                    {
                        if (isValid(board, row, col, c)) 
                        {
                            board[row][col] = c; 
                            if (backtrack(board)) return true; 
                            board[row][col] = '.'; 
                        }
                    }
                    return false; 
                }
            }
        }
        return true; 
    }

    private boolean isValid(char[][] board, int r, int c, char ch) {
        for (int i = 0; i < 9; i++) {
            if (board[r][i] == ch) return false;
            if (board[i][c] == ch) return false; 
            int subRow = 3 * (r / 3) + i / 3;
            int subCol = 3 * (c / 3) + i % 3;
            if (board[subRow][subCol] == ch) return false; 
        }
        return true;
    }
}
